组合模式(Composite Pattern)也叫合成模式， 有时又叫做部分-整体模式（ Part-Whole） ，
主要是用来描述部分与整体的关系， 其定义如下：
Compose objects into tree structures to represent part-whole hierarchies.Composite lets clients
treat individual objects and compositions of objects uniformly.（ 将对象组合成树形结构以表
示“部分-整体”的层次结构， 使得用户对单个对象和组合对象的使用具有一致性。 ）

XML文件就是组合模式的一个应用

但是简单的组合模式其实是对依赖倒置原则的破坏

优点：
● 高层模块调用简单
一棵树形机构中的所有节点都是Component， 局部和整体对调用者来说没有任何区别，
也就是说， 高层模块不必关心自己处理的是单个对象还是整个组合结构， 简化了高层模块的代码。
● 节点自由增加
使用了组合模式后， 我们可以看看， 如果想增加一个树枝节点、 树叶节点是不是都很容
易， 只要找到它的父节点就成， 非常容易扩展， 符合开闭原则， 对以后的维护非常有利。

缺点:
组合模式有一个非常明显的缺点， 看到我们在场景类中的定义， 提到树叶和树枝使用时
的定义了吗？ 直接使用了实现类！ 这在面向接口编程上是很不恰当的， 与依赖倒置原则冲
突， 读者在使用的时候要考虑清楚， 它限制了你接口的影响范围。

另外，组合模式有安全模式和透明模式两种。

透明模式是把用来组合使用的方法放到抽象类中， 比如add()、 remove()以及getChildren等方法（ 顺便说一下， getChildren
一般返回的结果为Iterable的实现类， 很多， 大家可以看JDK的帮助） ， 不管叶子对象还是树
枝对象都有相同的结构， 通过判断是getChildren的返回值确认是叶子节点还是树枝节点， 如
果处理不当， 这个会在运行期出现问题， 不是很建议的方式； 

安全模式就不同了， 它是把树
枝节点和树叶节点彻底分开， 树枝节点单独拥有用来组合的方法， 这种方法比较安全， 我们
的例子使用了安全模式。