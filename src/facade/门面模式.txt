门面模式

门面模式（ Facade Pattern） 也叫做外观模式， 是一种比较常用的封装模式， 其定义如下：
Provide a unified interface to a set of interfaces in a subsystem.Facade defines a higher-level
interface that makes the subsystem easier to use.（ 要求一个子系统的外部与其内部的通信必须通
过一个统一的对象进行。 门面模式提供一个高层次的接口， 使得子系统更易于使用。 ）

门面模式注重“统一的对象”， 也就是提供一个访问子系统的接口， 除了这个接口不允许
有任何访问子系统的行为发生

其实门面模式我觉得是最简单的模式了，而且根本不用刻意去记。平时我们封装接口的这个工作其实就是门面模式
就是把一系列的操作封成一个统一的方法而已。

场景:
1.	寄信的步骤：写信，写信封，把信放到信封里，投递到邮箱中
2.	每个人要寄信都是这样的步骤，很繁琐。现在出现了一个现代化邮局，你只要把信的内容和地址告诉他，他就能帮你完成所有的事情
3.	也就是，用ModenPostOffice把这4个步骤进行了封装，用户只需调用它的方法传入内容和地址即可，
	就是这么简单，就是对一个过程的封装而已。
4.	除此之外，如果要增加对信件的检查功能，只需要在ModenPostOffice中加入这个功能，对用户来说根本就是透明的。



优点：
门面模式有如下优点。
● 减少系统的相互依赖
想想看， 如果我们不使用门面模式， 外界访问直接深入到子系统内部， 相互之间是一种
强耦合关系， 你死我就死， 你活我才能活， 这样的强依赖是系统设计所不能接受的， 门面模
式的出现就很好地解决了该问题， 所有的依赖都是对门面对象的依赖， 与子系统无关。
● 提高了灵活性
依赖减少了， 灵活性自然提高了。 不管子系统内部如何变化， 只要不影响到门面对象，
任你自由活动。
● 提高安全性
想让你访问子系统的哪些业务就开通哪些逻辑， 不在门面上开通的方法， 你休想访问
到。

缺点：
门面模式最大的缺点就是不符合开闭原则， 对修改关闭， 对扩展开放， 看看我们那个门
面对象吧， 它可是重中之重， 一旦在系统投产后发现有一个小错误， 你怎么解决？ 完全遵从
开闭原则， 根本没办法解决。 继承？ 覆写？ 都顶不上用， 唯一能做的一件事就是修改门面角
色的代码， 这个风险相当大， 这就需要大家在设计的时候慎之又慎， 多思考几遍才会有好收
获。