享元模式（ Flyweight Pattern） 是池技术的重要实现方式， 其定义如下： Use sharing to
support large numbers of fine-grained objects efficiently.（ 使用共享对象可有效地支持大量的细
粒度的对象。 ）
享元模式的定义为我们提出了两个要求： 细粒度的对象和共享对象。 我们知道分配太多
的对象到应用程序中将有损程序的性能， 同时还容易造成内存溢出， 那怎么避免呢？ 就是享
元模式提到的共享技术。 我们先来了解一下对象的内部状态和外部状态。
要求细粒度对象， 那么不可避免地使得对象数量多且性质相近， 那我们就将这些对象的
信息分为两个部分： 内部状态（ intrinsic） 与外部状态（ extrinsic） 。
● 内部状态
内部状态是对象可共享出来的信息， 存储在享元对象内部并且不会随环境改变而改变，
如我们例子中的id、 postAddress等， 它们可以作为一个对象的动态附加信息， 不必直接储存
在具体某个对象中， 属于可以共享的部分。
● 外部状态
外部状态是对象得以依赖的一个标记， 是随环境改变而改变的、 不可以共享的状态， 如
我们例子中的考试科目+考试地点复合字符串， 它是一批对象的统一标识， 是唯一的一个索
引值。


场景：
1.	设计一个报考系统。登录后， 需要填写以下信息：
		● 考试科目， 选择框。
		● 考试地点， 选择框， 根据科目不同， 列表不同。
		● 准考证邮寄地址， 输入框。
		
2.	刚开始，采用工厂方法设计，SignInfo类是报考信息，SignInfoFactory是SignInfo的工厂，为每个登陆的用户new一个SignInfo对象，表面上没什么问题。
	问题出现了，当并发数达到一定数量的时候，SignInfo类的对象大幅增加，新的对象申请不到内存空间，于是出现OutOfMemory。
	
3.	既然已经定位是内存中对象太多， 那就应该想到使用一种共享的技术减少对象数量， 那怎么共享呢？ 
	设计一个共享对象池， 需要实现如下两个功能。
		● 容器定义
		我们要定义一个池容器， 在这个容器中容纳哪些对象。
		● 提供客户端访问的接口
		我们要提供一个接口供客户端访问， 池中有可用对象时， 可以直接从池中获得， 否则建立一个新的对象， 并放置到池中。
	这么多对象， 必然有一些相同的属性值，
	如几十万SignInfo对象中， 考试科目就4个， 考试地点也就是30多个， 其他的属性则是每个对
	象都不相同的， 我们把对象的相同属性提取出来， 不同的属性在系统内进行赋值处理

4.	于是，新建一个SignInfo的子类SignInfo4Pool类，
		很简单， 就是增加了一个key值， 为什么要增加key值？ 为什么要使用子类， 而不在
		SignInfo类上做修改？ 好， 我来给你解释为什么要这样做， 我们刚刚已经分析了所有的
		SignInfo对象都有一些共同的属性： 考试科目和考试地点， 我们把这些共性提取出来作为所
		有对象的外部状态， 在这个对象池中一个具体的外部状态只有一个对象。 按照这个设计， 我
		们定义key值的标准为： 考试科目+考试地点的复合字符串作为唯一的池对象标准， 也就是说
		在对象池中， 一个key值唯一对应一个对象。
	那么原来的SignInfo类中就没有必要再定义科目和地点属性了

5.	接着，修改工厂类SignInfoFactory，改成带对象池的工厂类。
	用一个HashMap作为池容器，用pool.containsKey(key)判断，如果池中没有该对象， 则建立， 并放入池中，有则直接返回。
	
6.	最后，在场景类Client中就可以用 “科目 + 地点” 的字符串到工厂中获取SignInfo对象了
	假如只有4个科目和30个考场，那个最多120个对象， 相比之前并发量大的时候数以万计的个SignInfo对象优化了非常多。



优点：
享元模式是一个非常简单的模式， 它可以大大减少应用程序创建的对象， 降低程序内存
的占用， 增强程序的性能， 但它同时也提高了系统复杂性， 需要分离出外部状态和内部状
态， 而且外部状态具有固化特性， 不应该随内部状态改变而改变， 否则导致系统的逻辑混
乱。

使用场景：
● 系统中存在大量的相似对象。
● 细粒度的对象都具备较接近的外部状态， 而且内部状态与环境无关， 也就是说对象没
有特定身份。
● 需要缓冲池的场景。


另外，外部状态最好以Java的基本类型作为标志， 如String、 int等， 可以大幅地提升效率。
因为使用自己编写的类作为外部状态， 必须覆写equals方法和hashCode方法，效率更低。

需要说明一下的是， 虽然可以使用享元模式可以实现对象池， 但是这两者还是有比较大
的差异， 对象池着重在对象的复用上， 池中的每个对象是可替换的， 从同一个池中获得A对
象和B对象对客户端来说是完全相同的， 它主要解决复用， 而享元模式在主要解决的对象的
共享问题， 如何建立多个可共享的细粒度对象则是其关注的重点。