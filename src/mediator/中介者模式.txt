中介者模式：用一个中介对象封装一系列的对象交互， 中介者使各对象不需要显示地相互作用， 从而使其耦合松散， 而且可以独立地改变它们之间的交互。

中介者模式的核心是通过事件方法来处理多个对象之间的关系 

进销存管理系统例子：
1.	如果只是让Purchase、Sale和Stock三个类彼此关联，虽然能实现功能，但是耦合很大，要想修改一个就得修改一片
	而且，如果之后要增加一些类，要改动的地方就大了。
2.	所以，使用中介者模式，加入了一个中介者Mediator作为三个模块的交流核心， 每个模块之间不再相互交流， 要交流就通过中介者进行。
	 每个模块只负责自己的业务逻辑， 不属于自己的则丢给中介者来处理， 简化了各模块之间的耦合关系
3.	建立了两个抽象类AbstractMediator和AbstractColeague， 每个对象只是与中介者Mediator之间产生依赖， 
	与其他对象之间没有直接关系， AbstractMediator的作用是实现中介者的抽象定义， 定义了一个抽象方法execute
4.	如此一来，每个类都简化了许多，只需要完成自己的行为（Self-Method）和交给中介者的行为（Depend-Method），结构清晰了很多


优点：
	中介者模式的优点就是减少类间的依赖， 把原有的一对多的依赖变成了一对一的依赖，同事类只依赖中介者， 减少了依赖， 当然同时也降低了类间的耦合。
缺点：
	中介者模式的缺点就是中介者会膨胀得很大， 而且逻辑复杂， 原本N个对象直接的相互依赖关系转换为中介者和同事类的依赖关系， 
	同事类越多， 中介者的逻辑就越复杂。
应用场景：
	MVC模式中，Controller即为Model和View的中介者