JDK的动态代理依靠接口实现，如果有些类并没有实现接口，则不能使用JDK代理，这就要使用cglib动态代理了。 

Cglib动态代理 

JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，
他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。 


1. 	此时的Tank类不再实现Moveable接口，只是一个普通的类
2. 	新建一个TankCglib类，实现Cglib提供的MethodInterceptor接口。
		重写接口的intercept回调函数，proxy.invokeSuper(obj, args)调用父类方法，并在前后加上事务。
		然后定义一个getProxy方法，创建Cglib提供的Enhancer类的实例enhancer，enhancer通过setSuperclass方法设置父类（也就是传入的Tank类）
		并调用回调函数，然后creat()一个对象返回。
3.	最后，在Client场景类中，只需要通过往TankCglib实例对象中传入要被代理的Tank对象，即可返回代理后的对象：new TankCglib().getProxy(t);
	调用代理后的对象的move方法，发现已经加入了我们要添加的事务。
