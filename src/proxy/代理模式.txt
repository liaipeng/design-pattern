定义：
为其他对象提供一种代理以控制对这个对象的访问。



设计过程：
1. 一开始，有一个Tank类，实现了Moveable接口。此时，我们想测试Tank的move方法的执行时间，最直观的方法是什么？
        就是分别在move方法开始和结束的地方获取System.currentTimeMillis()，然后相减。
        但是，如果你拿不到move方法的源码，怎么办？
2. 第一种方法，可以新建一个Tank2类，继承Tank类，那么就可以重写Tank的move方法，调用父类的move方法，在move方法的前后进行处理即可。
        这是继承。
3. 第二种方法，新建一个Tank3类，实现Moveable接口，在Tank3中维护一个Tank对象t，重写move方法时，调用t的move方法，在其前后进行处理。
        这是聚合。
4. 那么，Tank2和Tank3都是Tank的代理类。但是继承不灵活，如果代理功能要叠加，那么类会越来越多。而聚合则要灵活的多。
        比如，可以在Tank的一个时间代理TankTimeProxy中，把Tank改为维护一个Moveable对象。
        因为TankTimeProxy也实现了Moveable接口，那么它们之间其实是可以互相代理的！所以，代理的叠加就变得非常灵活。
             
接着，新的问题又出现了。假如Moveable中除了move方法，还有stop方法。
那我如果还想对stop方法进行时间记录，那我又得在stop方法中写上System.currentTimeMillis()这些处理，代码就冗余了。
而且，目前的时间代理类，只能给Tank用。假如我又来了一个Dog类呢？是不是 还得新建一个DogTimeProxy类？这样下去类也会无休止的增长。

所以，我们能不能新建一种通用的代理，可以适用于不同的对象。
此时，动态代理就出现了。动态代理是在实现阶段不用关心代理谁，而在运行阶段才指定代理哪一个对象。

首先，先看proxy.dynamicCompile包
   
